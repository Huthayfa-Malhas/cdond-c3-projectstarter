version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflowId >> --recursive
            aws cloudformation delete-stack --stack-name "frontend-stack-<< parameters.workflowId >>"
            aws cloudformation delete-stack --stack-name "backend-stack-<< parameters.workflowId >>"

  revert-migration:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowId:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: migration_<< parameters.workflowId >>" --request GET https://api.memstash.io/values/migration_<< parameters.workflowId >>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi

            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
             cd frontend
             npm i
             npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end test
          command: |
            cd frontend
            npm i
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm i
            npm run test  

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: front-end scan
          command: |
            cd frontend
            npm i
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm i
            npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli:2.0.6
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-xyxyxyxyxyxyxyxyxy \
               --stack-name "backend-stack-xyxyxyxyxyxyxyxyxy" \
               --parameter-overrides ID="xyxyxyxyxyxyxyxyxy"
      - run:
          name: cache BACKEND_IP_ADDRESS
          command: |
            BACKEND_IP_ADDRESS=$(aws ec2 describe-instances \
              --filter "Name=tag:project,Values=udapeople-backend-xyxyxyxyxyxyxyxyxy" "Name=instance-state-name,Values=running" \
              --query "Reservations[*].Instances[*].[PublicIpAddress]" \
              --output text)
            echo $BACKEND_IP_ADDRESS
            curl -H "Content-Type: text/plain" -H "token: xyxyxyxyxyxyxyxyxy" --request PUT --data "$BACKEND_IP_ADDRESS" https://api.memstash.io/values/xyxyxyxyxyxyxyxyxy
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-xyxyxyxyxyxyxyxyxy \
                --stack-name "frontend-stack-xyxyxyxyxyxyxyxyxy" \
                --parameter-overrides ID="xyxyxyxyxyxyxyxyxy"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP_ADDRESS=$(curl -H "token: xyxyxyxyxyxyxyxyxy" --request GET https://api.memstash.io/values/xyxyxyxyxyxyxyxyxy)
            echo $BACKEND_IP_ADDRESS
            echo $BACKEND_IP_ADDRESS >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run: yum install -y tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
#       - destroy-environment:
#           workflowId: "xyxyxyxyxyxyxyxyxy"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
            fingerprints:
            - "ac:00:2c:13:0f:1d:6f:fa:c1:a8:b4:37:b6:fe:ee:34"
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
              apk add --update curl python3 py3-pip
              pip3 install --upgrade pip
              pip3 install awscli           
              apk add --update ansible
      - run:
          name: Configure server
          command: |
              cat .circleci/ansible/inventory.txt
              ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflowId: "xyxyxyxyxyxyxyxyxy"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > successful_migrations
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            if grep "has been executed successfully" successful_migrations
            then
            MEMSTASH_DATA=1
            else
            MEMSTASH_DATA=0
            fi 
            echo $MEMSTASH_DATA
            curl -H "Content-Type: text/plain" -H "token: migration_xyxyxyxyxyxyxyxyxy" --request PUT --data "$MEMSTASH_DATA" https://api.memstash.io/values/migration_xyxyxyxyxyxyxyxyxy
      - destroy-environment:
          workflowId: "xyxyxyxyxyxyxyxyxy"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli:2.0.6
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_IP=$(curl -H "token: xyxyxyxyxyxyxyxyxy" --request GET https://api.memstash.io/values/xyxyxyxyxyxyxyxyxy)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            cd frontend
            npm i
            npm run build
            aws s3 cp ./dist s3://udapeople-xyxyxyxyxyxyxyxyxy --recursive
      - destroy-environment:
          workflowId: "xyxyxyxyxyxyxyxyxy"

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
          - "ac:00:2c:13:0f:1d:6f:fa:c1:a8:b4:37:b6:fe:ee:34"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli        
            apk add --update ansible
      - run:
          name: Deploy backend
          command: |
            cat .circleci/ansible/inventory.txt
            tar -zcvf backend.tar.gz backend
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflowId: "kk1j2z7dhjxxmz437"

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: xyxyxyxyxyxyxyxyxy" --request GET https://api.memstash.io/values/xyxyxyxyxyxyxyxyxy)
            echo $BACKEND_IP
            curl -s http://$BACKEND_IP:3030/api/status
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-xyxyxyxyxyxyxyxyxy.s3-website-us-west-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 0
            else
            return 1
            fi
      - destroy-environment:
          workflowId: "xyxyxyxyxyxyxyxyxy"
      - revert-migration:
          workflowId: "xyxyxyxyxyxyxyxyxy"

#   cloudfront-update:
#     docker:
#       - image: amazon/aws-cli:2.0.6
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             curl -sL https://rpm.nodesource.com/setup_10.x | bash -
#             yum install -y nodejs
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#                 --stack-name "udapeople-cloudfront" \
#                 --parameter-overrides WorkflowID="fa99d66f-c550-4079-9179-c6610ca89296"
  cleanup:
    docker:
      - image: amazon/aws-cli:2.0.6
    steps:
      - checkout
      - run:
          name: Cleanup
          command: |
              export OldWorkflowID=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)
              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                  --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
              echo $OldWorkflowID
              echo ${STACKS[*]}
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                  --stack-name "udapeople-cloudfront" \
                  --parameter-overrides WorkflowID="fa99d66f-c550-4079-9179-c6610ca89296"
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
                aws cloudformation delete-stack --stack-name "backend-stack-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "frontend-stack-${OldWorkflowID}" 
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive                           
              fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
#       - cloudfront-update
      - cleanup:
          requires: [smoke-test]
